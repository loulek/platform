'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

require('moment-range');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('./constants');

var _nav = require('./nav');

var _nav2 = _interopRequireDefault(_nav);

var _cell = require('./cell');

var _cell2 = _interopRequireDefault(_cell);

var _styledComponent = require('./styled-component');

var _styledComponent2 = _interopRequireDefault(_styledComponent);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_Component) {
  _inherits(Calendar, _Component);

  function Calendar(props) {
    _classCallCheck(this, Calendar);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Calendar).call(this, props));

    _this.state = {
      windowHeight: window.innerHeight
    };
    return _this;
  }

  _createClass(Calendar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      window.addEventListener('resize', this.updateDimensions.bind(this));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
      this.scrollToHour();
      this.updateDimensions();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (!this.props.above()) {
        this.scrollToHour();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      window.removeEventListener('resize', this.updateDimensions.bind(this));
    }
  }, {
    key: 'updateDimensions',
    value: function updateDimensions() {
      if (this._isMounted) {
        this.setState({ windowHeight: window.innerHeight });
      }
    }
  }, {
    key: 'scrollToHour',
    value: function scrollToHour() {
      if (this.props.level == 'hours' && this.refs.selected) {
        var selected = _reactDom2.default.findDOMNode(this.refs.selected);
        selected.parentNode.scrollTop = selected.offsetTop - 6;
      }
    }
  }, {
    key: 'onNavigateCell',
    value: function onNavigateCell(datetime) {
      var lvl = _constants.Levels[this.props.level];
      if (lvl.down) this.props.setLevel(lvl.down);
      this.props.onSelect(datetime, !lvl.down, lvl.key);
    }
  }, {
    key: 'onNavigateUp',
    value: function onNavigateUp() {
      var lvl = _constants.Levels[this.props.level];
      if (lvl.up) this.props.setLevel(lvl.up);
    }
  }, {
    key: 'onNavigateLeft',
    value: function onNavigateLeft() {
      var lvl = _constants.Levels[this.props.level].nav;
      this.props.onSelect(this.props.datetime.subtract(lvl.span, lvl.unit));
    }
  }, {
    key: 'onNavigateRight',
    value: function onNavigateRight() {
      var lvl = _constants.Levels[this.props.level].nav;
      this.props.onSelect(this.props.datetime.add(lvl.span, lvl.unit));
    }
  }, {
    key: 'onToday',
    value: function onToday() {
      var lvl = _constants.Levels[this.props.level];
      if ((0, _moment2.default)(this.props.datetime).isSame((0, _moment2.default)(), 'day')) {
        this.props.onSelect((0, _moment2.default)(), !lvl.down);
      } else {
        this.props.onSelect((0, _moment2.default)());
      }
    }
  }, {
    key: 'getTitle',
    value: function getTitle(unit, datetime) {
      datetime = datetime || (0, _moment2.default)();

      var _ret = function () {
        switch (unit) {
          case 'years':
            var start = datetime.clone().subtract(4, 'years');
            var end = datetime.clone().add(7, 'years');
            var years = [];

            (0, _moment2.default)().range(start, end).by(_constants.Units.YEAR, function (year) {
              years.push({
                label: year.format('YYYY'),
                selected: year.isSame(datetime, 'year')
              });
            });
            return {
              v: [years[0].label, years[years.length - 1].label].join('-')
            };

          case 'months':
            return {
              v: datetime.format('YYYY')
            };

          case 'days':
            return {
              v: datetime.format('MMMM')
            };

          case 'hours':
            return {
              v: null
            };
        }
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
  }, {
    key: 'getCells',
    value: function getCells(unit, datetime) {
      var _this2 = this;

      datetime = datetime || (0, _moment2.default)();
      switch (unit) {
        case 'years':
          {
            var _ret2 = function () {
              var start = datetime.clone().subtract(4, 'years');
              var end = datetime.clone().add(7, 'years');
              var years = [];
              var format = (0, _get2.default)(_this2.props, 'options.format.year') || 'YYYY';

              (0, _moment2.default)().range(start, end).by(_constants.Units.YEAR, function (year) {
                years.push({
                  moment: year,
                  label: year.format(format),
                  selected: year.isSame(datetime, 'year')
                });
              });

              return {
                v: years
              };
            }();

            if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
          }

        case 'months':
          {
            var _ret3 = function () {
              var start = datetime.clone().startOf('year');
              var end = datetime.clone().endOf('year');
              var months = [];
              var format = (0, _get2.default)(_this2.props, 'options.format.month') || 'MMM';

              (0, _moment2.default)().range(start, end).by(_constants.Units.MONTH, function (month) {
                months.push({
                  moment: month,
                  label: month.format(format),
                  selected: month.isSame(datetime, 'month')
                });
              });

              return {
                v: months
              };
            }();

            if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
          }

        case 'days':
          {
            var _ret4 = function () {
              var start = datetime.clone().startOf('month').weekday(0);
              var end = datetime.clone().endOf('month').weekday(6);
              var days = [];
              var format = (0, _get2.default)(_this2.props, 'options.format.day') || 'D';

              _moment2.default.weekdaysMin().forEach(function (day) {
                days.push({
                  label: day,
                  header: true
                });
              });

              (0, _moment2.default)().range(start, end).by(_constants.Units.DAY, function (day) {
                days.push({
                  moment: day,
                  label: day.format(format),
                  past: day.isBefore(datetime, 'month'),
                  future: day.isAfter(datetime, 'month'),
                  selected: day.isSame(datetime, 'day'),
                  today: day.isSame((0, _moment2.default)(), 'day')
                });
              });

              return {
                v: days
              };
            }();

            if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === "object") return _ret4.v;
          }

        case 'hours':
          {
            var _ret5 = function () {
              var start = datetime.clone().startOf('day');
              var end = datetime.clone().endOf('day');
              var hours = [];
              var closeBefore = datetime.clone().subtract(31, 'minutes');
              var closeAfter = datetime.clone().add(31, 'minutes');
              var format = (0, _get2.default)(_this2.props, 'options.format.hour') || 'h:mm a';

              (0, _moment2.default)().range(start, end).by(_constants.Units.HOUR, function (hour) {
                hours.push({
                  moment: hour,
                  label: hour.format(format),
                  selected: hour.isSame(datetime, 'minute'),
                  nearestBefore: hour.isBetween(closeBefore, datetime),
                  nearestAfter: hour.isBetween(datetime, closeAfter)
                });
                var halfHour = hour.clone().add(30, 'minutes');
                hours.push({
                  moment: halfHour,
                  label: halfHour.format(format),
                  selected: halfHour.isSame(datetime, 'minute'),
                  nearestBefore: halfHour.isBetween(closeBefore, datetime),
                  nearestAfter: halfHour.isBetween(datetime, closeAfter)
                });
              });

              return {
                v: hours
              };
            }();

            if ((typeof _ret5 === 'undefined' ? 'undefined' : _typeof(_ret5)) === "object") return _ret5.v;
          }

      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props;
      var level = _props.level;
      var datetime = _props.datetime;
      var classes = _props.classes;


      var inputRect = {};
      var calendarClass = classes.calendarBelow;

      if (this.props.input) {
        inputRect = this.props.input.getClientRects()[0];
      }

      if (inputRect.top + inputRect.height + 237 > this.state.windowHeight) {
        calendarClass = classes.calendarAbove;
      }

      return _react2.default.createElement(
        'div',
        {
          className: calendarClass,
          onMouseDown: function onMouseDown(e) {
            return _this3.props.above(true);
          },
          onMouseUp: function onMouseUp(e) {
            return _this3.props.above(false);
          }
        },
        level != 'hours' && _react2.default.createElement(_nav2.default, {
          id: this.props.id,
          onPrev: this.onNavigateLeft.bind(this),
          onNext: this.onNavigateRight.bind(this),
          onTitle: this.onNavigateUp.bind(this),
          title: this.getTitle(level, datetime)
        }),
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(classes.grid, level) },
          this.getCells(level, datetime).map(function (cell, i) {
            var type = void 0;
            switch (true) {
              case cell.header:
                type = 'header';
                break;
              case cell.past:
                type = 'past';
                break;
              case cell.future:
                type = 'future';
                break;
              default:
                type = 'base';
                break;
            }
            return _react2.default.createElement(_cell2.default, {
              key: i,
              ref: cell.selected || cell.nearestBefore ? 'selected' : null,
              label: cell.label,
              level: level,
              type: type,
              selected: cell.selected,
              today: cell.today,
              moment: cell.moment,
              onClick: _this3.onNavigateCell.bind(_this3),
              classes: classes,
              invalid: _this3.props.validate(cell.moment, level)
            });
          }),
          level != 'hours' && _react2.default.createElement(
            'div',
            { className: classes.today, onClick: this.onToday.bind(this) },
            (0, _get2.default)(this.props, 'options.format.today') || 'Today'
          )
        )
      );
    }
  }]);

  return Calendar;
}(_react.Component);

Calendar.PropTypes = {
  datetime: _react.PropTypes.object.isRequired,
  onSelect: _react.PropTypes.func.isRequired,
  level: _react.PropTypes.string.isRequired,
  setLevel: _react.PropTypes.func.isRequired,
  onMouseDown: _react.PropTypes.func,
  onMouseUp: _react.PropTypes.func
};
Calendar._isMounted = false;
exports.default = (0, _styledComponent2.default)(Calendar, function (props, id) {
  return (0, _styles2.default)('calendar', props, id);
});